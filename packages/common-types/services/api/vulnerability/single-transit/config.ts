import { GeoJSON } from "geojson";
import { CommonConfig } from "../../common-body";

export interface SingleTransitionCollisionConfig extends CommonConfig {
  area: GeoJSON.Feature<GeoJSON.Polygon | GeoJSON.MultiPolygon>;
  // birdDensitiesPerMonth: number[];
  updownProportion: number;
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  xinc: number;
  yinc: number;
  // avoidanceRates: number[];
}
export type SingleTransitCollisionRiskControllerResult = {
  upwindCollisionRisk: SingleTransitCollisionRiskResult;
  downwindCollisionRisk: SingleTransitCollisionRiskResult;
  total: number;
};
export type SingleTransitCollisionRiskResult = {
  total: number;
  results: { alpha?: number; colllength?: number; pcollision: number }[];
};

export type WindfarmCollisionConfigType = {
  blades: number;
  radius: number;
  pitch: number;
  chord: number;
  bladeForm: [number, number][];
  omega: number;
  numberOfTurbines: number;
};
export type BirdCollisionConfigType = {
  speed: number;
  length: number;
  wingspan: number;
  nocturnalActivity: number;
  flight_type: "flapping" | "gliding";
};
export type WindfarmInstanceConfigType = {
  hubheight: number;
  offset: number;
  timeOfWorkPerMonth?: number[];
};
export type IntegralAreaCollisionConfig = {
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  flightheights: [number, number][];
};
