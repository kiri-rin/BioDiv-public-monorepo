import { Feature, GeoJSON, MultiPolygon, Polygon } from "geojson";
import {
  BirdCollisionConfigType,
  SingleTransitCollisionRiskControllerResult,
  WindfarmCollisionConfigType,
  WindfarmInstanceConfigType,
} from "../single-transit/config";
import { CommonConfig } from "../../common-body";
import { FlightHeightTransitRiskResponse } from "../flight-height-distribution/configs";

export interface MultipleAreaVulnerabilityRequest extends CommonConfig {
  //todo refactor config
  areas: {
    id: number | string;
    area: GeoJSON.Feature<Polygon | MultiPolygon>;
    flightheights: [number, number][];
    percentAtRotorHeight?: number;
    birdDensitiesPerMonth?: number[];
    tracksDensityPerMonth?: number[];
  }[];
  updownProportion: number;
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  xinc: number;
  yinc: number;
}

export type MultipleAreaVulnerabilityControllerResponse = {
  [areaId: string]: {
    area: Feature<Polygon | MultiPolygon, any>;
    extended?: FlightHeightTransitRiskResponse;
    allExtended?: VulnerabilityYearOverallResults;
    allSingle?: VulnerabilityYearOverallResults;
    single?: SingleTransitCollisionRiskControllerResult;
  };
};
export type VulnerabilityYearOverallResults = {
  collisionsAssumingAvoidance: { [p: number]: number[] };
  collisionsAssumingAvoidanceTotals: { [p: number]: number };
  potentialCollisionsPerMonth: number[];
  potentialCollisionsTotal: number;
  potentialTransitsPerMonth: number[];
  potentialTransitsTotal: number;
  fluxFactorsPerMonth: number[];
  nightHoursPerMonth: number[];
  dayHoursPerMonth: number[];
};
export interface AreaVulnerabilityControllerRequest extends CommonConfig {
  area: GeoJSON.Feature<Polygon | MultiPolygon>;
  flightheights: [number, number][];
  percentAtRotorHeight?: number;
  birdDensitiesPerMonth?: number[];
  tracksDensityPerMonth?: number[];
  updownProportion: number;
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  xinc: number;
  yinc: number;
}
export type AreaVulnerabilityControllerResponse =
  MultipleAreaVulnerabilityControllerResponse[string];
export type HabitatAreaOverallVulnerabilityControllerRequest = CommonConfig & {
  birds_count: number;
  presence_months: number[];
} & Omit<
    AreaVulnerabilityControllerRequest,
    "flightheights" | "birdDensitiesPerMonth"
  >;
export type HabitatAreaOverallVulnerabilityControllerResponse =
  AreaVulnerabilityControllerResponse & {
    birds_count: number;
  };
