import testMigrationsJson from "@rrrcn/common-helpers/src/test-configs/vulnerabilities/test-migrations.json";
import testAreaJson from "@rrrcn/common-helpers/src/test-configs/vulnerabilities/test-area.json";
import { Feature } from "@turf/turf";
import { MultiPolygon, Polygon } from "@turf/helpers";
import { habitatAreaOverallVulnerabilityController } from "@rrrcn/services/src/controllers/vulnerability/overall-vulnerability/habitat-area";
import request from "supertest";
import { setTimeout } from "timers/promises";
import { ServicesVulnerabilityApiTypes } from "@rrrcn/common-types/services/api/vulnerability";
import { MigrationPath } from "@rrrcn/common-types/services/api/migrations/generate-tracks/config";
import { AnalysisResult } from "@rrrcn/common-types/strapi/models/AnalysisResult";
import { VulnerabilityResult } from "@rrrcn/common-types/strapi/models/VulnerabilityResult";
import { Result } from "@rrrcn/common-types/strapi/models/Result";

const testArea = testAreaJson as unknown as Feature<Polygon | MultiPolygon>;
const testMigrations = [testMigrationsJson] as unknown as MigrationPath[];

const analysisConfig: ServicesVulnerabilityApiTypes.OverallHabitatAreaVulnerability.Body =
  {
    birds_count: 1000,
    // migrations: testMigrations,
    area: testArea,
    updownProportion: 0.5,
    yinc: 0.05,
    xinc: 0.05,

    windfarmInstanceConfig: {
      offset: 0,
      timeOfWorkPerMonth: [
        0.75, 0.8, 0.83, 0.76, 0.7, 0.67, 0.69, 0.7, 0.8, 0.83, 0.8, 0.78,
      ],
      hubheight: 90,
    },
    windfarmConfig: {
      pitch: 15,
      radius: 60.5,
      numberOfTurbines: 40,
      omega: 5,
      chord: 4.21,
      blades: 3,
      bladeForm: [
        [0.05, 0.73],
        [0.1, 0.79],
        [0.15, 0.88],
        [0.2, 0.96],
        [0.25, 1.0],
        [0.3, 0.98],
        [0.35, 0.92],
        [0.4, 0.85],
        [0.45, 0.8],
        [0.5, 0.75],
        [0.55, 0.7],
        [0.6, 0.64],
        [0.65, 0.58],
        [0.7, 0.52],
        [0.75, 0.47],
        [0.8, 0.41],
        [0.85, 0.37],
        [0.9, 0.3],
        [0.95, 0.24],
        [1, 0.0],
      ],
    },
    birdConfig: {
      nocturnalActivity: 0,
      speed: 5.06,
      flight_type: "gliding",
      length: 0.78,
      wingspan: 2.05,
    },
    outputs: "./test",

    percentAtRotorHeight: 0.18,
  };
let analysis_data: ServicesVulnerabilityApiTypes.OverallHabitatAreaVulnerability.Response;
let analysisResultEntity: AnalysisResult;
let vulnerabilityResults: VulnerabilityResult[];
let vulnerabilityResult: VulnerabilityResult;
let response;
let userResult;
describe("Habitat area vulnerability analysis api", () => {
  test("Api returns 200", async () => {
    response = await request(strapi.server.httpServer)
      .post("/api/analysis/process")
      .send({ type: "habitat-area-vulnerability", config: analysisConfig });
    expect(response).toBeDefined();
  });
  test("User result returned", async () => {
    userResult = response.body;
    expect(userResult.id).toBeDefined();
    expect(userResult.type).toBe("habitat-area-vulnerability");
  });
  test("Process finished successfully", async () => {
    let finished = false;
    let strapiUserResult: Result;
    while (!finished) {
      await setTimeout(1000);
      userResult = await strapi
        .service("api::result.result")
        .findOne(userResult.id, { populate: ["analysis_results"] });
      console.log(userResult);
      if (userResult.status === "completed") {
        finished = true;
      }
    }
    expect(userResult.analysis_results).toHaveLength(1);
  });
  test("Analysis result data correct", async () => {
    expect(userResult.analysis_results[0].analysis_data).toEqual(
      await habitatAreaOverallVulnerabilityController(analysisConfig)
    );
  });
});
