import {
  mockCell,
  mockVulnerabilities,
} from "../../../src/api/map/services/utils/calculate-cell-vulnerability.unit.test";
import { SpatialGridCell } from "@rrrcn/common/dist/src/types/strapi/models/SpatialGridCell";
import { setTimeout } from "timers/promises";
import { SpatialGrid } from "@rrrcn/common/dist/src/types/strapi/models/SpatialGrid";
import { VulnerabilityResult } from "@rrrcn/common/dist/src/types/strapi/models/VulnerabilityResult";
import { calculateCellVulnerability } from "../../../src/api/map/services/utils/calculate-cell-vulnerability";
let testGrid: SpatialGrid;
let secondTestGrid: SpatialGrid;
let testCell: SpatialGridCell;
let secondTestCell: SpatialGridCell;
let first_vulnerability: VulnerabilityResult;
let second_vulnerability: VulnerabilityResult;
beforeAll(async () => {
  //TODO add species tests
  testGrid = await strapi.service("api::map.map-spatial-grid").create({
    data: {
      polygon: mockCell.polygon,
      name: "test",
      cell_size: 5000,
    },
  });
  secondTestGrid = await strapi.service("api::map.map-spatial-grid").create({
    data: {
      polygon: mockCell.polygon,
      name: "test2",
      cell_size: 5000,
    },
  });
  testCell = await strapi.service("api::map.map-spatial-grid-cell").create({
    data: {
      polygon: mockCell.polygon,
      spatial_grid: testGrid.id,
    },
  });
  secondTestCell = await strapi
    .service("api::map.map-spatial-grid-cell")
    .create({
      data: {
        polygon: mockCell.polygon,
        spatial_grid: secondTestGrid.id,
      },
    });
  first_vulnerability = await strapi
    .service("api::vulnerability-result.vulnerability-result")
    .create({
      data: {
        vulnerability: mockVulnerabilities[0].vulnerability,
        polygon: mockVulnerabilities[0].polygon,
        spatial_grid: testGrid.id,
      },
    });
});
describe("Vulnerability recalculation", () => {
  it("Grid defined ", () => {
    expect(testGrid).toBeDefined();
  });
  it("Cell defined ", () => {
    expect(testCell).toBeDefined();
    expect(testCell.total_vulnerability).toBe(null);
  });
  it("Vulnerability defined integral", () => {
    expect(first_vulnerability).toBeDefined();
  });
  it("Vulnerability cells contain test cell ", async () => {
    const vulnerabilityCells = await strapi
      .service("api::map.map-spatial-grid-cell")
      .getCellsInsidePolygon(first_vulnerability, testGrid.id);
    expect(vulnerabilityCells.length).toBeGreaterThanOrEqual(1);
    expect(vulnerabilityCells).toContainEqual(
      expect.objectContaining({ id: testCell.id })
    );
  });
  it("First vulnerability cell recalculation ", async () => {
    await setTimeout(5000);
    testCell = await strapi
      .service("api::map.map-spatial-grid-cell")
      .findOne(String(testCell.id), {
        populate: ["vulnerability_results", "spatial_grid"],
      });
    const expectedVulnerability = calculateCellVulnerability(
      [first_vulnerability],
      testCell
    );
    expect(testCell.vulnerability_results).toHaveLength(1);
    expect(testCell.total_vulnerability).toBeCloseTo(
      expectedVulnerability.total_vulnerability,
      0
    );
  }, 200000);

  it("Second vulnerability cell recalculation ", async () => {
    second_vulnerability = await strapi.db
      .query("api::vulnerability-result.vulnerability-result")
      .create({
        data: {
          vulnerability: mockVulnerabilities[1].vulnerability,
          polygon: mockVulnerabilities[1].polygon,
          spatial_grid: testGrid.id,
        },
      });
    await setTimeout(5000);
    testCell = await strapi
      .service("api::map.map-spatial-grid-cell")
      .findOne(String(testCell.id), {
        populate: ["vulnerability_results", "spatial_grid"],
      });
    const expectedVulnerability = calculateCellVulnerability(
      [first_vulnerability, second_vulnerability],
      testCell
    );
    expect(testCell.vulnerability_results).toHaveLength(2);
    expect(testCell.total_vulnerability).toBeCloseTo(
      expectedVulnerability.total_vulnerability,
      0
    );
  }, 200000);
  it("Second vulnerability remove grid cell recalculation ", async () => {
    second_vulnerability = await strapi
      .service("api::vulnerability-result.vulnerability-result")
      .update(String(second_vulnerability.id), {
        data: {
          spatial_grid: null,
        },
      });
    await setTimeout(10000);
    testCell = await strapi
      .service("api::map.map-spatial-grid-cell")
      .findOne(String(testCell.id), {
        populate: ["vulnerability_results", "spatial_grid"],
      });
    const expectedVulnerability = calculateCellVulnerability(
      [first_vulnerability],
      testCell
    );
    expect(testCell.vulnerability_results).toHaveLength(1);
    expect(testCell.total_vulnerability).toBeCloseTo(
      expectedVulnerability.total_vulnerability,
      0
    );
  }, 200000);

  it("Second vulnerability add grid cell recalculation ", async () => {
    second_vulnerability = await strapi
      .service("api::vulnerability-result.vulnerability-result")
      .update(String(second_vulnerability.id), {
        data: {
          spatial_grid: testGrid.id,
        },
      });
    await setTimeout(5000);
    testCell = await strapi
      .service("api::map.map-spatial-grid-cell")
      .findOne(String(testCell.id), {
        populate: ["vulnerability_results", "spatial_grid"],
      });
    const expectedVulnerability = calculateCellVulnerability(
      [first_vulnerability, second_vulnerability],
      testCell
    );
    expect(testCell.vulnerability_results).toHaveLength(2);
    expect(testCell.total_vulnerability).toBeCloseTo(
      expectedVulnerability.total_vulnerability,
      0
    );
  }, 200000);

  it("Second vulnerability change grid cell recalculation ", async () => {
    second_vulnerability = await strapi
      .service("api::vulnerability-result.vulnerability-result")
      .update(String(second_vulnerability.id), {
        data: {
          spatial_grid: secondTestGrid.id,
        },
      });
    await setTimeout(10000);
    testCell = await strapi
      .service("api::map.map-spatial-grid-cell")
      .findOne(String(testCell.id), {
        populate: ["vulnerability_results", "spatial_grid"],
      });
    secondTestCell = await strapi
      .service("api::map.map-spatial-grid-cell")
      .findOne(String(secondTestCell.id), {
        populate: ["vulnerability_results", "spatial_grid"],
      });
    const expectedFirstVulnerability = calculateCellVulnerability(
      [first_vulnerability],
      testCell
    );
    const expectedSecondVulnerability = calculateCellVulnerability(
      [second_vulnerability],
      secondTestCell
    );
    expect(testCell.vulnerability_results).toHaveLength(1);
    expect(testCell.total_vulnerability).toBeCloseTo(
      expectedFirstVulnerability.total_vulnerability,
      0
    );

    expect(secondTestCell.vulnerability_results).toHaveLength(1);
    expect(secondTestCell.total_vulnerability).toBeCloseTo(
      expectedSecondVulnerability.total_vulnerability,
      0
    );
  }, 200000);

  it("First vulnerability delete cell recalculation ", async () => {
    await strapi.entityService.delete(
      "api::vulnerability-result.vulnerability-result",
      String(first_vulnerability.id)
    );

    await setTimeout(5000);
    testCell = await strapi
      .service("api::map.map-spatial-grid-cell")
      .findOne(String(testCell.id), {
        populate: ["vulnerability_results", "spatial_grid"],
      });
    expect(testCell.vulnerability_results).toHaveLength(0);
    expect(testCell.total_vulnerability).toBeCloseTo(0, 0);
  }, 200000);
});
