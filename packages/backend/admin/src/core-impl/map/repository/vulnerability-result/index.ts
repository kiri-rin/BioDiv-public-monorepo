import { IMapVulnerabilityResultRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/vulnerability-result";
import { Strapi } from "@strapi/strapi";
import { AreaVulnerabilityControllerResponse } from "@rrrcn/common-types/services/api/vulnerability/overall/configs";
import {
  IMapVulnerabilityCalculation,
  IMapVulnerabilityResult,
  IMapVulnerabilityTracksConfigCalculation,
  MapVulnerabilityResultDTO,
} from "@rrrcn/admin/src/core/vulnerability-map/entities/vulnerability-result";
import { MapVulnereabilityCalculationConfig } from "@rrrcn/common-types/strapi/custom-models/MapVulnereabilityCalculation";
import {
  StrapiMapVulnerabilityResult,
  StrapiMapVulnerabilityTracksConfigCalculation,
} from "@rrrcn/admin/src/core-impl/map/entities/vulnerability-result";
import { IMapHabitatAreasRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/habitat-areas";
import { IMapMigrationsRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/migrations";
import {
  StrapiMapVulnerabilityCalculationHabitatArea,
  StrapiMapVulnerabilityCalculationImport,
  StrapiMapVulnerabilityCalculationMigration,
} from "@rrrcn/admin/src/core-impl/map/entities/vulnerability-result/calculations";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";
import { IMapImportConfigRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/import-config";

type IdType = number;
export class StrapiMapVulnerabilityResultRepository
  implements IMapVulnerabilityResultRepository<IdType>
{
  constructor(
    private strapi: Strapi,
    private habitatAreaRepository: IMapHabitatAreasRepository<IdType>,
    private migrationRepository: IMapMigrationsRepository<IdType>,
    private importConfigRepository: IMapImportConfigRepository<IdType>
  ) {}
  async createVulnerabilityResult(params: {
    cellId: IdType;
    calculationId: IdType;
    calculatedConfig: CommonVulnerabilityConfig;
    result: AreaVulnerabilityControllerResponse;
  }): Promise<IMapVulnerabilityResult<IdType>> {
    const vulnerabilitiesArray = [
      ...(params.result.allSingle
        ? Object.values(
            params.result.allSingle.collisionsAssumingAvoidanceTotals
          )
        : []),
      ...(params.result.allExtended
        ? Object.values(
            params.result.allExtended.collisionsAssumingAvoidanceTotals
          )
        : []),
    ];
    const maxVulnerability = vulnerabilitiesArray.length
      ? Math.max(...vulnerabilitiesArray)
      : undefined;
    const strapiResult = await strapi.db
      .query("api::map.map-vulnerability-result")
      .create({
        data: {
          max_vulnerability: maxVulnerability,
          spatial_grid_cell: params.cellId,
          map_vulnereability_calculation: params.calculationId,
          vulnerability_data: params.result,
          calculated_config: params.calculatedConfig,
        },
      });
    return new StrapiMapVulnerabilityResult(strapiResult);
  }

  async createHabitatAreaVulnerabilityCalculation(params: {
    gridId: IdType;
    habitatAreaId: IdType;
    config: MapVulnereabilityCalculationConfig;
  }): Promise<IMapVulnerabilityCalculation<IdType>> {
    const strapiResult = await strapi.db
      .query("api::map.map-vulnereability-calculation")
      .create({
        data: {
          type: "habitat_area",
          map_spatial_grid: params.gridId,
          map_habitat_area: params.habitatAreaId,
          vulnerability_configs: params.config,
        },
        populate: ["map-spatial-grid"],
      });
    const habitatArea = await this.habitatAreaRepository.getHabitatArea(
      params.habitatAreaId
    );
    return new StrapiMapVulnerabilityCalculationHabitatArea(
      strapiResult,
      habitatArea
    );
  }
  async createImportVulnerabilityCalculation(params: {
    gridId: IdType;
    importConfigId: IdType;
  }): Promise<IMapVulnerabilityCalculation<IdType>> {
    const strapiResult = await strapi.db
      .query("api::map.map-vulnereability-calculation")
      .create({
        data: {
          type: "import",
          map_spatial_grid: params.gridId,
          map_import_config: params.importConfigId,
        },
        populate: ["map-spatial-grid"],
      });
    const importConfig = await this.importConfigRepository.getImportConfig(
      params.importConfigId
    );
    return new StrapiMapVulnerabilityCalculationImport(
      strapiResult,
      importConfig
    );
  }
  async createMigrationVulnerabilityCalculation(params: {
    gridId: IdType;
    migrationId: IdType;
    config: MapVulnereabilityCalculationConfig;
  }): Promise<IMapVulnerabilityCalculation<IdType>> {
    const strapiResult = await strapi.db
      .query("api::map.map-vulnereability-calculation")
      .create({
        data: {
          type: "migration",
          map_spatial_grid: params.gridId,
          map_species_migration: params.migrationId,
          vulnerability_configs: params.config,
        },
        populate: ["map-spatial-grid"],
      });
    const migration = await this.migrationRepository.getMigration(
      params.migrationId
    );
    return new StrapiMapVulnerabilityCalculationMigration(
      strapiResult,
      migration
    );
  }

  async markVulnerabilityCalculationAsProcessed(
    calculationId: IdType
  ): Promise<void> {
    const strapiResult = await strapi.db
      .query("api::map.map-vulnereability-calculation")
      .update({
        where: { id: calculationId },
        data: {
          processed: true,
        },
      });
  }

  async getVulnerabilityResult(
    id: Required<IdType>
  ): Promise<IMapVulnerabilityResult<IdType>> {
    const strapiResult = await strapi.db
      .query("api::map.map-vulnerability-result")
      .findOne({
        where: { id },
        populate: ["spatial_grid_cell", "map-vulnerability-calculation"],
      });
    return new StrapiMapVulnerabilityResult(strapiResult);
  }

  async getVulnerabilityResultBySpatialGridCell(
    cell_id: Required<IdType>
  ): Promise<IMapVulnerabilityResult<IdType>[]> {
    const strapiResults = await strapi.db
      .query("api::map.map-vulnerability-result")
      .findMany({
        where: { spatial_grid_cell: { id: cell_id } },
        populate: ["spatial_grid_cell", "map-vulnerability-calculation"],
      });
    return strapiResults.map((it) => new StrapiMapVulnerabilityResult(it));
  }

  async getVulnerabilityResultsGroupedBySpatialGridCell(params: {
    districtId: IdType;
  }): Promise<
    Map<
      IdType,
      Pick<
        MapVulnerabilityResultDTO<IdType>,
        "vulnerability" | "id" | "cellId"
      >[]
    >
  > {
    const cells = await strapi.db
      .query("api::map.map-spatial-grid-cells")
      .findMany({
        where: {
          map_spatial_grid_district: params.districtId,
        },
        populate: ["map_vulnerability_results"],
      });
    return new Map(
      cells.map((cell) => [
        cell.id,
        cell.map_vulnerability_results.map((res) => ({
          vulnerability: res.vulnerability,
          id: res.id,
          cellId: cell.id,
        })),
      ])
    );
  }

  async createVulnerabilityConfigCalculation({
    trackIds,
    averageSpeed,
    flightHeights,
    flightLocationsPercent,
    rotor,
    percentAtRotorHeight,
    flightLocationsPercentByCalc,
    averageCalcSpeed,
  }: {
    flightHeights: [number, number][];
    flightLocationsPercent: number;
    flightLocationsPercentByCalc: number;
    rotor: [number, number];
    percentAtRotorHeight: number;
    trackIds: IdType[];
    averageSpeed: number;
    averageCalcSpeed: number;
  }): Promise<IMapVulnerabilityTracksConfigCalculation<IdType>> {
    const strapiRes = await strapi.db
      .query(
        "api::map-vulnerability-tracks-config-calculation.map-vulnerability-tracks-config-calculation"
      )
      .create({
        data: {
          calculated: {
            flightLocationsPercentByCalc,
            averageCalcSpeed,
            rotor,
            percentAtRotorHeight,
            averageSpeed,
            flightHeights,
            flightLocationsPercent,
          },
          map_migration_tracks: trackIds,
        },
      });
    return new StrapiMapVulnerabilityTracksConfigCalculation(strapiRes);
  }
}
