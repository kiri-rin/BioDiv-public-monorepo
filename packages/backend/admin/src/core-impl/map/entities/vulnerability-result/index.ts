import { MapVulnereabilityCalculation } from "@rrrcn/common-types/strapi/custom-models/MapVulnereabilityCalculation";
import { AreaVulnerabilityControllerResponse } from "@rrrcn/common-types/services/api/vulnerability/overall/configs";
import {
  IMapVulnerabilityResult,
  IMapVulnerabilityTracksConfigCalculation,
} from "@rrrcn/admin/src/core/vulnerability-map/entities/vulnerability-result";
import { CommonVulnerabilityCalculator } from "@rrrcn/admin/src/core/common/entities/vulnerability-config";
import { IMapHabitatArea } from "@rrrcn/admin/src/core/vulnerability-map/entities/habitat-area";

import { IMapMigration } from "@rrrcn/admin/src/core/vulnerability-map/entities/migrations";
import { MyMapVulnerabilityResult } from "@rrrcn/common-types/strapi/custom-models/MyMapVulnerabilityResult";
import { MyMapVulnerabilityConfigCalculation } from "@rrrcn/common-types/strapi/custom-models/MapVulnerabilityConfigCalculation";
import { IMapSpatialGridCell } from "@rrrcn/admin/src/core/vulnerability-map/entities/spatial-grid";
import { rrrcnServicesClient } from "@rrrcn/admin/src/rrrcn-services-client";
import { ICommonGridVulnerabilityCalculationConfig } from "@rrrcn/admin/src/core/common/entities/vulnerability-result";
import { IMapImportConfig } from "@rrrcn/admin/src/core/vulnerability-map/entities/import";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";

type IdType = number;

export class StrapiMapVulnerabilityCalculationHabitatAreaConfig extends ICommonGridVulnerabilityCalculationConfig {
  private strapiVulnerabilityCalculation: MapVulnereabilityCalculation;
  private habitatArea: IMapHabitatArea<number>;
  constructor(
    strapiVulnerabilityCalculation: MapVulnereabilityCalculation,
    habitatArea: IMapHabitatArea<number>
  ) {
    super();
    this.strapiVulnerabilityCalculation = strapiVulnerabilityCalculation;
    this.habitatArea = habitatArea;
  }
  _getCellConfig(cell: IMapSpatialGridCell<IdType>): CommonVulnerabilityConfig {
    return {
      area: cell.area.polygon,
      percentAtRotorHeight:
        this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
          .percentAtRotorHeight,
      flightheights:
        this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
          .flightheights,
      updownProportion:
        this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
          .updownProportion,
      birdDensitiesPerMonth:
        this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
          .birdDensitiesPerMonth ||
        this.habitatArea.getAreaBirdDensitiesPerMonth(
          cell.area.polygon.geometry
        ),
      birdConfig: {
        length: this.habitatArea.species.length,
        wingspan: this.habitatArea.species.wingspan,
        nocturnalActivity: this.habitatArea.species.nocturnalActivity,
        flight_type:
          this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
            .flight_type,
        speed:
          this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
            .speed,
      },
      windfarmConfig:
        this.strapiVulnerabilityCalculation.vulnerability_configs
          .windfarmConfig,
      windfarmInstanceConfig:
        this.strapiVulnerabilityCalculation.vulnerability_configs
          .windfarmInstanceConfig,
    };
  }
}
export class StrapiMapVulnerabilityCalculationMigrationConfig extends ICommonGridVulnerabilityCalculationConfig {
  private strapiVulnerabilityCalculation: MapVulnereabilityCalculation;
  private migration: IMapMigration<number>;
  constructor(
    strapiVulnerabilityCalculation: MapVulnereabilityCalculation,
    migration: IMapMigration<number>
  ) {
    super();
    this.strapiVulnerabilityCalculation = strapiVulnerabilityCalculation;
    this.migration = migration;
  }
  _getCellConfig(cell: IMapSpatialGridCell<IdType>): CommonVulnerabilityConfig {
    const { radius } =
      this.strapiVulnerabilityCalculation.vulnerability_configs.windfarmConfig;
    const { hubheight } =
      this.strapiVulnerabilityCalculation.vulnerability_configs
        .windfarmInstanceConfig;
    const rotor = { start: hubheight - radius, end: hubheight + radius };
    return {
      area: cell.area.polygon,
      percentAtRotorHeight:
        this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
          .percentAtRotorHeight ||
        this.migration.getCellPercentAtRotorHeight(cell, rotor),
      tracksDensityPerMonth: this.migration.getCellTrackDensitiesPerMonth(cell),
      flightheights:
        this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
          .flightheights ||
        this.migration.getCellFlightHeightsDistribution(cell),
      updownProportion:
        this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
          .updownProportion,
      birdDensitiesPerMonth:
        this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
          .birdDensitiesPerMonth || [],
      birdConfig: {
        length: this.migration.species.length,
        wingspan: this.migration.species.wingspan,
        nocturnalActivity: this.migration.species.nocturnalActivity,
        flight_type:
          this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
            .flight_type,
        speed:
          this.strapiVulnerabilityCalculation.vulnerability_configs.overrides
            .speed,
      },
      windfarmConfig:
        this.strapiVulnerabilityCalculation.vulnerability_configs
          .windfarmConfig,
      windfarmInstanceConfig:
        this.strapiVulnerabilityCalculation.vulnerability_configs
          .windfarmInstanceConfig,
    };
  }
}
export class StrapiMapVulnerabilityCalculationImportConfig extends ICommonGridVulnerabilityCalculationConfig {
  constructor(
    private strapiVulnerabilityCalculation: MapVulnereabilityCalculation,
    private importConfig: IMapImportConfig<number>
  ) {
    super();
  }
  _getCellConfig(cell: IMapSpatialGridCell<IdType>): CommonVulnerabilityConfig {
    return this.importConfig.getCellConfig(cell);
  }
}
export class StrapiMapVulnerabilityResult
  implements IMapVulnerabilityResult<number>
{
  private strapiVulnerabilityResult: MyMapVulnerabilityResult;
  constructor(strapiVulnerabilityResult: MyMapVulnerabilityResult) {
    this.strapiVulnerabilityResult = strapiVulnerabilityResult;
  }
  get calculationId(): IdType {
    return this.strapiVulnerabilityResult.map_vulnereability_calculation.id;
  }
  get cellId(): IdType {
    return this.strapiVulnerabilityResult.spatial_grid_cell.id;
  }
  get vulnerability(): number {
    throw "Not implemented";
    return 0;
  }
  get vulnerabilityData(): AreaVulnerabilityControllerResponse {
    return this.strapiVulnerabilityResult.vulnerability_data;
  }
}
export class RRRCNVulnerabilityCalculator
  implements CommonVulnerabilityCalculator<any>
{
  calculateVulnerability(
    config: CommonVulnerabilityConfig
  ): Promise<AreaVulnerabilityControllerResponse> {
    return rrrcnServicesClient.areaVulnerabilityController({
      ...config,
      xinc: 0.05,
      yinc: 0.05,
    });
  }
}
export class StrapiMapVulnerabilityTracksConfigCalculation
  implements IMapVulnerabilityTracksConfigCalculation<number>
{
  private strapiConfigCalculation: MyMapVulnerabilityConfigCalculation;
  constructor(strapiConfigCalculation: MyMapVulnerabilityConfigCalculation) {
    this.strapiConfigCalculation = strapiConfigCalculation;
  }
  get id(): number {
    return this.strapiConfigCalculation.id;
  }
  get flightHeights(): [number, number][] {
    return this.strapiConfigCalculation.calculated.flightheights;
  }
  get flightLocationsPercent(): number {
    return this.strapiConfigCalculation.calculated.flightLocationsPercent;
  }
  get flightSpeed(): number {
    return this.strapiConfigCalculation.calculated.flightSpeed;
  }
  getPercentAtRotorHeight(rotor: [number, number]) {
    const atRotorHeight = this.flightHeights
      .filter(([height, count]) => {
        if (height >= rotor[0] && height <= rotor[1]) {
          return true;
        }
      })
      .reduce((acc, [_, count]) => acc + count, 0);
    const all = this.flightHeights.reduce((acc, [_, count]) => acc + count, 0);
    return all ? atRotorHeight / all : 0;
  }
}
