import { AreaVulnerabilityControllerResponse } from "@rrrcn/common-types/services/api/vulnerability/overall/configs";
import { feature, featureCollection } from "@turf/helpers";
import { writeFile } from "node:fs/promises";
import path from "path";
import { mkdirSync } from "fs";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";

export async function saveGisCalculateHabitatAreaVulnerabilityResults(
  results: {
    cellId: number;
    vulnerability: AreaVulnerabilityControllerResponse;
    cellConfig: CommonVulnerabilityConfig;
  }[],
  output: string
) {
  mkdirSync(output, { recursive: true });
  const simpleFeatures = [];
  const fullFeatures = [];
  for (const res of results) {
    const simpleCellFeature = feature(res.cellConfig.area.geometry, {
      cellId: res.cellId,
      potentialCollisionsTotal: (
        res.vulnerability.allExtended || res.vulnerability.allSingle
      ).potentialCollisionsTotal,
      potentialTransitsTotal: (
        res.vulnerability.allExtended || res.vulnerability.allSingle
      ).potentialTransitsTotal,
    });
    const fullCellFeature = feature(res.cellConfig.area.geometry, {
      cellId: res.cellId,
      config: res.cellConfig,
      vulnerability: res.vulnerability,
    });
    simpleFeatures.push(simpleCellFeature);
    fullFeatures.push(fullCellFeature);
  }
  const simpleFC = featureCollection(simpleFeatures);
  const fullFC = featureCollection(fullFeatures);
  await writeFile(path.join(output, "res.geojson"), JSON.stringify(simpleFC));
  await writeFile(path.join(output, "full.json"), JSON.stringify(results));
}
