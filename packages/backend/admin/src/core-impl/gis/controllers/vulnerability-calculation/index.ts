import { GisVulnerabilityCalculationService } from "@rrrcn/admin/src/core/gis/use-cases/vulnerability-calculation/services";
import { GisHabitatAreaVulnerabilityCalculationConfig } from "@rrrcn/common-types/admin/api/gis/grid-vulnerability";
import {
  CommonGridVulnerabilityCalculationConfig,
  ICommonGridVulnerabilityCalculationConfigDensity,
} from "@rrrcn/admin/src/core/common/entities/vulnerability-result";
import { parseDensitiesPoints } from "@rrrcn/admin/src/core-impl/gis/controllers/vulnerability-calculation/parsers/densitites/points";
import { parseSpeed } from "@rrrcn/admin/src/core-impl/gis/controllers/vulnerability-calculation/parsers/speed";
import { parseFlightHeights } from "@rrrcn/admin/src/core-impl/gis/controllers/vulnerability-calculation/parsers/flight_heights";
import { saveGisCalculateHabitatAreaVulnerabilityResults } from "@rrrcn/admin/src/core-impl/gis/controllers/vulnerability-calculation/save_results";
import { AreaVulnerabilityControllerResponse } from "@rrrcn/common-types/services/api/vulnerability/overall/configs";
import { parseFlightLocations } from "@rrrcn/admin/src/core-impl/gis/controllers/vulnerability-calculation/parsers/flight_locations";
import { parseDensitiesArea } from "@rrrcn/admin/src/core-impl/gis/controllers/vulnerability-calculation/parsers/densitites/area";
import { CommonArea } from "@rrrcn/admin/src/core/common/entities/area";
import { importGeometriesGeojson } from "@rrrcn/services/src/utils/import-geometries-geojson";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";

//TODO REFACTOR!
type IdType = number;
export class GisVulnerabilityCalculationControllers {
  private gisVulnerabilityServices: GisVulnerabilityCalculationService<IdType>;
  constructor(
    gisVulnerabilityServices: GisVulnerabilityCalculationService<IdType>
  ) {
    this.gisVulnerabilityServices = gisVulnerabilityServices;
  }
  async calculateHabitatAreaVulnerability(
    config: GisHabitatAreaVulnerabilityCalculationConfig
  ) {
    let density: ICommonGridVulnerabilityCalculationConfigDensity;
    let area: CommonArea;
    switch (config.density.type) {
      case "points": {
        density = await parseDensitiesPoints(config.density);
        break;
      }
      case "area": {
        density = await parseDensitiesArea(config.density);
        area = new CommonArea(
          (
            await importGeometriesGeojson(config.density.presence_area)
          ).features[0]
        );
        break;
      }
      default: {
        throw "Not implemmented";
      }
    }
    const speed = parseSpeed(config.bird_speed);
    const flight_heights = parseFlightHeights(config.flight_heights);
    const flight_locations = parseFlightLocations(config.flight_locations);
    const vulnerabilityCalculationConfig =
      new CommonGridVulnerabilityCalculationConfig(
        density,
        flight_heights,
        flight_locations,
        speed,
        {
          updownProportion: config.updownProportion,
          birdConfig: config.bird_config,
          windfarmConfig: {
            bladeForm: config.windfarm_config.bladeForm,
            blades: config.windfarm_config.blades,
            chord: config.windfarm_config.chord,
            numberOfTurbines: config.windfarm_config.numberOfTurbines,
            omega: config.windfarm_config.omega,
            pitch: config.windfarm_config.pitch,
            radius: config.windfarm_config.radius,
          },
          windfarmInstanceConfig: {
            hubheight: config.windfarm_config.hubheight,
            offset: config.windfarm_config.offset,
            timeOfWorkPerMonth: config.windfarm_config.timeOfWorkPerMonth,
          },
        }
      );
    const generator =
      await this.gisVulnerabilityServices.calculateHabitatAreaVulnerabilityGrid(
        vulnerabilityCalculationConfig,
        config.grid,
        area
      );
    const results: {
      cellId: IdType;
      vulnerability: AreaVulnerabilityControllerResponse;
      cellConfig: CommonVulnerabilityConfig;
    }[] = [];
    let end;
    while (!end) {
      const res = await generator.next();
      end = res.done;
      res.value && results.push(res.value);
    }
    await saveGisCalculateHabitatAreaVulnerabilityResults(
      results,
      config.outputs
    );
    return results;
  }
}
