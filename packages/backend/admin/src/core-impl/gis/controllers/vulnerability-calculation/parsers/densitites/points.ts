import GeoJSON from "geojson";
import { importGeometriesGeojson } from "@rrrcn/services/src/utils/import-geometries-geojson"; //TODO REFACTOR!!
import { featureCollection } from "@turf/helpers";
import {
  GisHabitatAreaVulnerabilityCalculationConfigDensityPoints,
  GisHabitatAreaVulnerabilityCalculationConfigPointsCountType,
} from "@rrrcn/common-types/admin/api/gis/grid-vulnerability";
import { ICommonGridVulnerabilityCalculationConfigDensity } from "@rrrcn/admin/src/core/common/entities/vulnerability-result";
import { CommonSpatialGridVulnerabilityCellDensityBreedingCount } from "@rrrcn/admin/src/core/common/entities/vulnerability-result/counts/impl";
import { parseGisVulnerabilityCalculationsTableCounts } from "@rrrcn/admin/src/core-impl/gis/controllers/vulnerability-calculation/parsers/densitites/counts";
import { CommonSpatialGridVulnerabilityCellDensityPoints } from "@rrrcn/admin/src/core/common/entities/vulnerability-result/densities/points";
import { CommonArea } from "@rrrcn/admin/src/core/common/entities/area";

type InputPointsKeys =
  | "buffer"
  | "1"
  | "2"
  | "3"
  | "4"
  | "5"
  | "6"
  | "7"
  | "8"
  | "9"
  | "10"
  | "11"
  | "12"
  | "01"
  | "02"
  | "03"
  | "04"
  | "05"
  | "06"
  | "07"
  | "08"
  | "09";
export async function parseDensitiesPoints(
  density: GisHabitatAreaVulnerabilityCalculationConfigDensityPoints
): Promise<ICommonGridVulnerabilityCalculationConfigDensity> {
  const { points, count, default_buffer, presence_area } = density;
  const parsedArea = new CommonArea(
    (await importGeometriesGeojson(presence_area, "polygon").then(
      (res) => res!.features[0]
    )) as GeoJSON.Feature<GeoJSON.Polygon>
  );
  const paresedPoints: GeoJSON.FeatureCollection<
    GeoJSON.Point,
    { [p in InputPointsKeys]: string }
  > = (await importGeometriesGeojson(points, "points", [
    "buffer",
    ...new Array(12)
      .fill(0)
      .flatMap((_, index) =>
        index < 10 ? [String(index + 1), `0${index + 1}`] : [`${index}`]
      ),
  ])) as GeoJSON.FeatureCollection<
    GeoJSON.Point,
    { [p in InputPointsKeys]: string }
  >;
  const correctPoints = featureCollection(
    paresedPoints.features.map((point) => ({
      ...point,
      properties: {
        buffer: Number(point.properties.buffer),
        count: {
          0: Number(point.properties["1"] || point.properties["01"]),
          1: Number(point.properties["2"] || point.properties["02"]),
          2: Number(point.properties["3"] || point.properties["03"]),
          3: Number(point.properties["4"] || point.properties["04"]),
          4: Number(point.properties["5"] || point.properties["05"]),
          5: Number(point.properties["6"] || point.properties["06"]),
          6: Number(point.properties["7"] || point.properties["07"]),
          7: Number(point.properties["8"] || point.properties["08"]),
          8: Number(point.properties["9"] || point.properties["09"]),
          9: Number(point.properties["10"]),
          10: Number(point.properties["11"]),
          11: Number(point.properties["12"]),
        },
      },
    }))
  );
  const parsedCount = await parsePointsDensityCounts(count);
  return new CommonSpatialGridVulnerabilityCellDensityPoints(
    parsedArea,
    parsedCount,
    correctPoints
  );
}
export const parsePointsDensityCounts = async (
  counts: GisHabitatAreaVulnerabilityCalculationConfigPointsCountType
) => {
  switch (counts.type) {
    case "breeding":
      return new CommonSpatialGridVulnerabilityCellDensityBreedingCount(
        counts.data
      );
    case "table":
      return await parseGisVulnerabilityCalculationsTableCounts(
        counts.file
      ).then((res) => res[0].count);
  }
};
