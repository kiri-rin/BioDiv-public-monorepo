import { ICommonSpatialGridVulnerabilityCellDensityCount } from "@rrrcn/admin/src/core/common/entities/vulnerability-result";
import { CommonSpatialGridVulnerabilityCellDensitySimpleCount } from "@rrrcn/admin/src/core/common/entities/vulnerability-result/counts/impl";
import { readFile } from "fs/promises";
import { parse } from "csv-parse/sync";

export const parseGisVulnerabilityCalculationsTableCounts = async (
  file: string
): Promise<
  {
    id: string;
    count: ICommonSpatialGridVulnerabilityCellDensityCount;
  }[]
> => {
  const fileData = await readFile(file);
  const csvData = parse(fileData);
  const header = csvData[0];
  const idIndex = header.findIndex((it) => it === "id");
  if (idIndex === -1) {
    throw "id column is required";
  }
  const janIndex = header.findIndex((it) => it === "1" || it === "01");
  const febIndex = header.findIndex((it) => it === "2" || it === "02");
  const marchIndex = header.findIndex((it) => it === "3" || it === "03");
  const aprIndex = header.findIndex((it) => it === "4" || it === "04");
  const mayIndex = header.findIndex((it) => it === "5" || it === "05");
  const junIndex = header.findIndex((it) => it === "6" || it === "06");
  const jalIndex = header.findIndex((it) => it === "7" || it === "07");
  const augIndex = header.findIndex((it) => it === "8" || it === "08");
  const sepIndex = header.findIndex((it) => it === "9" || it === "09");
  const octIndex = header.findIndex((it) => it === "10");
  const novIndex = header.findIndex((it) => it === "11");
  const decIndex = header.findIndex((it) => it === "12");
  return csvData.slice(0).map((row) => {
    const id = row[idIndex];
    const count = {
      0: Number(row[janIndex]),
      1: Number(row[febIndex]),
      2: Number(row[marchIndex]),
      3: Number(row[aprIndex]),
      4: Number(row[mayIndex]),
      5: Number(row[junIndex]),
      6: Number(row[jalIndex]),
      7: Number(row[augIndex]),
      8: Number(row[sepIndex]),
      9: Number(row[octIndex]),
      10: Number(row[novIndex]),
      11: Number(row[decIndex]),
    };
    return {
      id,
      count: new CommonSpatialGridVulnerabilityCellDensitySimpleCount(count),
    };
  });
};
