import { SpatialGridCell } from "@rrrcn/common-types/strapi/models/SpatialGridCell";
import { VulnerabilityResult } from "@rrrcn/common-types/strapi/models/VulnerabilityResult";
import * as turf from "@turf/turf";

export function calculateCellVulnerability(
  vulnerabilities: VulnerabilityResult[],
  cell: SpatialGridCell
) {
  return vulnerabilities.reduce(
    (acc, it) => {
      // TODO split by vulnerability type
      const area = turf.area(it.polygon as any);
      const intersection = turf.intersect(
        it.polygon as any,
        cell.polygon as any
      );
      const intersectionArea = turf.area(intersection);
      const cellVulnerabilityAddition =
        it.vulnerability * Math.min(intersectionArea / area, 1);

      acc.total_vulnerability += cellVulnerabilityAddition;

      const speciesVulnerabilities = acc.speciesVulnerabilities;
      if (it.species) {
        if (!speciesVulnerabilities[it.species.id]) {
          speciesVulnerabilities[it.species.id] = {
            species: it.species.id,
            vulnerability: cellVulnerabilityAddition,
          };
        } else {
          speciesVulnerabilities[it.species.id].vulnerability +=
            cellVulnerabilityAddition;
        }
      }
      return acc;
    },
    {
      total_vulnerability: 0,
      speciesVulnerabilities: {} as {
        [p: number]: { species: number; vulnerability: number };
      },
    }
  ); // / (vulnerabilities.length || 1);
}
