import { Strapi } from "@strapi/strapi";
import type { AnalysisResult } from "@rrrcn/common-types/strapi/models/AnalysisResult";
import {
  mapHabitatAreaVulnerabilitySingleAreaAnalysisResult,
  mapVulnerabilityAnalysisResult,
} from "./utils/mappings/vulnerability";
import {
  HabitatAreaOverallVulnerabilityControllerResponse,
  MultipleAreaVulnerabilityControllerResponse,
} from "@rrrcn/common-types/services/api/vulnerability/overall/configs";
export interface AnalysisResultVulnerability extends AnalysisResult {
  analysis_data: MultipleAreaVulnerabilityControllerResponse;
}
export interface AnalysisResultHabitatAreaVulnerability extends AnalysisResult {
  analysis_data: HabitatAreaOverallVulnerabilityControllerResponse;
}
export default function ({ strapi }: { strapi: Strapi }) {
  return {
    async createVulnerabilityDataFromAnalysisResult(
      entity: AnalysisResultVulnerability
    ) {
      const parsedResults = mapVulnerabilityAnalysisResult(
        entity.analysis_data
      );

      for (const result of parsedResults) {
        await strapi
          .service("api::vulnerability-result.vulnerability-result")
          .create({
            data: {
              analysis_result: entity.id,
              ...result,
            },
          });
      }
    },
    async createHabitatAreaVulnerabilityDataFromAnalysisResult(
      entity: AnalysisResultHabitatAreaVulnerability
    ) {
      const parsedResults = mapHabitatAreaVulnerabilitySingleAreaAnalysisResult(
        entity.analysis_data
      );
      console.log(parsedResults);
      await strapi
        .service("api::vulnerability-result.vulnerability-result")
        .create({
          data: {
            analysis_result: entity.id,
            ...parsedResults,
          },
        });
    },
  };
}
