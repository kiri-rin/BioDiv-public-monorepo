import { VulnerabilityResult } from "@rrrcn/common-types/strapi/models/VulnerabilityResult";
import { ServicesVulnerabilityApiTypes } from "@rrrcn/common-types/services/api/vulnerability";

export const mapVulnerabilityAnalysisResult = (
  analysisServiceResult: ServicesVulnerabilityApiTypes.OverallMultipleAreaVulnerability.Response
) => {
  return Object.entries(analysisServiceResult).map(([areaId, res]) =>
    mapVulnerabilitySingleAreaAnalysisResult(res)
  );
};

export const mapVulnerabilitySingleAreaAnalysisResult = (
  analysisServiceResult: ServicesVulnerabilityApiTypes.OverallMultipleAreaVulnerability.Response[string]
): Pick<VulnerabilityResult, "polygon" | "data" | "vulnerability"> => {
  const vulnerabilitiesArray = [
    ...(analysisServiceResult.allSingle
      ? Object.values(
          analysisServiceResult.allSingle.collisionsAssumingAvoidanceTotals
        )
      : []),
    ...(analysisServiceResult.allExtended
      ? Object.values(
          analysisServiceResult.allExtended.collisionsAssumingAvoidanceTotals
        )
      : []),
  ];
  const maxVulnerability = vulnerabilitiesArray.length
    ? Math.max(...vulnerabilitiesArray)
    : undefined;
  return {
    polygon: analysisServiceResult.area,
    data: analysisServiceResult,
    vulnerability: maxVulnerability,
  };
};
export const mapHabitatAreaVulnerabilitySingleAreaAnalysisResult = (
  analysisServiceResult: ServicesVulnerabilityApiTypes.OverallHabitatAreaVulnerability.Response
): Pick<
  VulnerabilityResult,
  "polygon" | "data" | "vulnerability" | "vulnerability_type"
> => {
  const res = mapVulnerabilitySingleAreaAnalysisResult(analysisServiceResult);
  return {
    ...res,
    vulnerability_type: "area",
    vulnerability: Math.min(
      analysisServiceResult.birds_count,
      res.vulnerability
    ),
  };
};
