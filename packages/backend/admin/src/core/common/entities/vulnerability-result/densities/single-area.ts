import {
  ICommonGridVulnerabilityCalculationConfigDensity,
  ICommonSpatialGridVulnerabilityCellDensityCount,
} from "@rrrcn/admin/src/core/common/entities/vulnerability-result";
import { ICommonSpatialGridCell } from "@rrrcn/admin/src/core/common/entities/spatial-grid";
import { CommonArea } from "@rrrcn/admin/src/core/common/entities/area";
import * as turf from "@turf/turf";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";

export class CommonSpatialGridVulnerabilityCellSingleAreaDensity
  implements ICommonGridVulnerabilityCalculationConfigDensity
{
  constructor(
    readonly precenseArea: CommonArea,
    readonly default_count: ICommonSpatialGridVulnerabilityCellDensityCount
  ) {}
  getCellDensitiesPerMonth(
    cell: ICommonSpatialGridCell
  ): Pick<
    CommonVulnerabilityConfig,
    "birdDensitiesPerMonth" | "tracksDensityPerMonth"
  > {
    const counts = this.default_count.getTotalCountPerMonth();
    const intersection = cell.area.intersects(this.precenseArea);
    const cellArea = turf.area(cell.area.polygon);
    const totalArea = this.precenseArea.area();
    const intersectionArea = intersection.area();
    const densities = new Array(12)
      .fill(0)
      .map(
        (_, index) =>
          (1000 * 1000 * (counts[index] * intersectionArea)) /
          (cellArea * totalArea)
      );

    return {
      birdDensitiesPerMonth: densities,
    };
  }
}
