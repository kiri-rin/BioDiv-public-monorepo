import {
  ICommonGridVulnerabilityCalculationConfigDensity,
  ICommonSpatialGridVulnerabilityCellDensityCount,
} from "@rrrcn/admin/src/core/common/entities/vulnerability-result";
import GeoJSON from "geojson";
import { ICommonSpatialGridCell } from "@rrrcn/admin/src/core/common/entities/spatial-grid";
import * as turf from "@turf/turf";
import { MonthsKey } from "@rrrcn/admin/src/core/common/entities/vulnerability-result/counts";
import { CommonArea } from "@rrrcn/admin/src/core/common/entities/area";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";

export class CommonSpatialGridVulnerabilityCellDensityPoints
  implements ICommonGridVulnerabilityCalculationConfigDensity
{
  private totalArea: number;
  constructor(
    private presenceArea: CommonArea,
    private default_count: ICommonSpatialGridVulnerabilityCellDensityCount,
    private points: GeoJSON.FeatureCollection<
      GeoJSON.Point,
      {
        buffer: number;
        count: { [p in MonthsKey]: number };
      }
    >
  ) {
    this.totalArea = presenceArea.area();
  }

  getCellDensitiesPerMonth(
    area: ICommonSpatialGridCell
  ): Pick<
    CommonVulnerabilityConfig,
    "birdDensitiesPerMonth" | "tracksDensityPerMonth"
  > {
    const cellArea = turf.area(area.area.polygon);
    const defaults = this.default_count.getTotalCountPerMonth();
    const densities = this.points.features
      .map((it) => {
        const buffer = turf.buffer(it, it.properties.buffer);
        const intersection = turf.intersect(buffer, area.area.polygon);
        if (!intersection) {
          return new Array(12).fill(0);
        }

        return new Array(12).fill(0).map((_, key) => {
          const default_value = defaults[key];
          return (
            ((it.properties.count[key] || default_value) *
              turf.area(intersection)) /
            cellArea
          );
        });
      })
      .reduce(
        (acc, dens_arr) => {
          return acc.map((it, index) => it + dens_arr[index]);
        },
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      );
    return { birdDensitiesPerMonth: densities as number[] };
  }
}
