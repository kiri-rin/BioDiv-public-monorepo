import {
  ICommonGridVulnerabilityCalculationConfigDensity,
  ICommonSpatialGridVulnerabilityCellDensityCount,
} from "@rrrcn/admin/src/core/common/entities/vulnerability-result";
import { CommonArea } from "@rrrcn/admin/src/core/common/entities/area";
import { ICommonSpatialGridCell } from "@rrrcn/admin/src/core/common/entities/spatial-grid";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";

export class CommonSpatialGridVulnerabilityCellRangedAreasDensity
  implements ICommonGridVulnerabilityCalculationConfigDensity
{
  readonly default_count: ICommonSpatialGridVulnerabilityCellDensityCount;
  private presenceRangedAreas: {
    area: CommonArea;
    density: number;
    default_count: ICommonSpatialGridVulnerabilityCellDensityCount;
  }[];
  getCellDensitiesPerMonth(
    cell: ICommonSpatialGridCell
  ): Pick<
    CommonVulnerabilityConfig,
    "birdDensitiesPerMonth" | "tracksDensityPerMonth"
  > {
    const densitiesPerMonth = this.presenceRangedAreas
      .map(({ area: pres_area, density, default_count }) => {
        const intersection = pres_area.intersects(cell.area);
        const counts = default_count.getTotalCountPerMonth();
        return new Array(12)
          .fill(0)
          .map(
            (_, index) =>
              (counts[index] * (density * intersection.area())) /
              cell.area.area()
          );
      })
      .reduce(
        (a, b) => a.map((_, index) => a[index] + b[index]),
        new Array(12).fill(0)
      );

    return { birdDensitiesPerMonth: densitiesPerMonth };
  }
}
