import { ICommonSpatialGridCell } from "@rrrcn/admin/src/core/common/entities/spatial-grid";
import {
  ICommonGridVulnerabilityCalculationConfigSpeed,
  MonthsKey,
} from "@rrrcn/admin/src/core/common/entities/vulnerability-result/counts";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";

export type CommonVulnerabilitySimpleConfigPart = Omit<
  CommonVulnerabilityConfig,
  | "tracksDensityPerMonth"
  | "birdDensitiesPerMonth"
  | "flightheights"
  | "percentAtRotorHeight"
  | "birdConfig"
> & { birdConfig: Omit<CommonVulnerabilityConfig["birdConfig"], "speed"> };
export abstract class ICommonGridVulnerabilityCalculation {
  // abstract getAreaConfig(area: CommonArea): CommonVulnerabilityConfig;
  constructor(
    public readonly config: ICommonGridVulnerabilityCalculationConfig
  ) {}
}

export abstract class ICommonGridVulnerabilityCalculationConfig {
  public readonly density: ICommonGridVulnerabilityCalculationConfigDensity;
  public readonly flightHeights: ICommonGridVulnerabilityCalculationConfigFlightHeights;
  public readonly flightLocations: ICommonGridVulnerabilityCalculationConfigFlightLocations;
  public readonly speed: ICommonGridVulnerabilityCalculationConfigSpeed;
  // abstract getAreaConfig(area: CommonArea): CommonVulnerabilityConfig;
  abstract _getCellConfig(
    area: ICommonSpatialGridCell
  ): CommonVulnerabilitySimpleConfigPart;
  public getCellConfig(
    cell: ICommonSpatialGridCell
  ): CommonVulnerabilityConfig {
    const config = this._getCellConfig(cell); //TODO Deep copy
    if (this.density) {
      Object.assign(config, this.density.getCellDensitiesPerMonth(cell));
    }
    if (this.flightHeights) {
      Object.assign(config, this.flightHeights.getCellFlightHeights(cell));
    }
    if (this.speed) {
      (config.birdConfig as CommonVulnerabilityConfig["birdConfig"]).speed =
        this.speed.getCellAverageBirdSpeed(cell);
    }
    if (this.flightLocations) {
      //@ts-ignore
      config.birdDensitiesPerMonth = config.birdDensitiesPerMonth.map(
        (it) => it * this.flightLocations.getCellFlightLocationsPercent(cell)
      );
    }

    return config as CommonVulnerabilityConfig;
  }
}
export abstract class ICommonGridVulnerabilityCalculationConfigDensity {
  abstract getCellDensitiesPerMonth(
    area: ICommonSpatialGridCell
  ): Pick<
    CommonVulnerabilityConfig,
    "birdDensitiesPerMonth" | "tracksDensityPerMonth"
  >;
}
export abstract class ICommonGridVulnerabilityCalculationConfigFlightHeights {
  abstract getCellFlightHeights(
    area: ICommonSpatialGridCell
  ): Pick<CommonVulnerabilityConfig, "flightheights" | "percentAtRotorHeight">;
}
export abstract class ICommonGridVulnerabilityCalculationConfigFlightLocations {
  abstract getCellFlightLocationsPercent(area: ICommonSpatialGridCell): number;
}

export abstract class ICommonSpatialGridVulnerabilityCellDensityCount {
  abstract getTotalCountPerMonth(): { [p in MonthsKey]: number };
}
export class CommonGridVulnerabilityCalculationConfig extends ICommonGridVulnerabilityCalculationConfig {
  constructor(
    public readonly density: ICommonGridVulnerabilityCalculationConfigDensity,
    public readonly flightHeights: ICommonGridVulnerabilityCalculationConfigFlightHeights,
    public readonly flightLocations: ICommonGridVulnerabilityCalculationConfigFlightLocations,
    public readonly speed: ICommonGridVulnerabilityCalculationConfigSpeed,
    private rest_config: Omit<CommonVulnerabilitySimpleConfigPart, "area">
  ) {
    super();
  }
  _getCellConfig(
    area: ICommonSpatialGridCell
  ): CommonVulnerabilitySimpleConfigPart {
    return Object.assign(this.rest_config, { area: area.area.polygon });
  }
}
