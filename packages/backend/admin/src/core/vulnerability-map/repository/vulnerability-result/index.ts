import {
  IMapVulnerabilityCalculation,
  IMapVulnerabilityResult,
  IMapVulnerabilityTracksConfigCalculation,
  MapVulnerabilityResultDTO,
} from "@rrrcn/admin/src/core/vulnerability-map/entities/vulnerability-result";
import { AreaVulnerabilityControllerResponse } from "@rrrcn/common-types/services/api/vulnerability/overall/configs";
import { MapVulnereabilityCalculationConfig } from "@rrrcn/common-types/strapi/custom-models/MapVulnereabilityCalculation";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";

export abstract class IMapVulnerabilityResultRepository<IdType> {
  abstract createVulnerabilityResult(params: {
    cellId: IdType;
    calculationId: IdType;
    calculatedConfig: CommonVulnerabilityConfig;
    result: AreaVulnerabilityControllerResponse;
  }): Promise<IMapVulnerabilityResult<IdType>>;

  abstract createHabitatAreaVulnerabilityCalculation(params: {
    gridId: IdType;
    habitatAreaId: IdType;
    config: MapVulnereabilityCalculationConfig;
  }): Promise<IMapVulnerabilityCalculation<IdType>>;
  abstract createImportVulnerabilityCalculation(params: {
    gridId: IdType;
    importConfigId: IdType;
  }): Promise<IMapVulnerabilityCalculation<IdType>>;
  //
  // abstract createImportVulnerabilityCalculation(params: {
  //   gridId: IdType;
  //   data:;
  // }): Promise<IMapVulnerabilityCalculation<IdType>>;

  abstract createMigrationVulnerabilityCalculation(params: {
    gridId: IdType;
    migrationId: IdType;
    config: MapVulnereabilityCalculationConfig;
  }): Promise<IMapVulnerabilityCalculation<IdType>>;

  abstract markVulnerabilityCalculationAsProcessed(
    calculationId: IdType
  ): Promise<void>;

  abstract getVulnerabilityResult(
    id: Required<IdType>
  ): Promise<IMapVulnerabilityResult<IdType>>;

  abstract getVulnerabilityResultBySpatialGridCell(
    cell_id: Required<IdType>
  ): Promise<IMapVulnerabilityResult<IdType>[]>;

  abstract getVulnerabilityResultBySpatialGridCell(
    cell_id: Required<IdType>
  ): Promise<IMapVulnerabilityResult<IdType>[]>;

  abstract getVulnerabilityResultsGroupedBySpatialGridCell(params: {
    districtId: IdType;
  }): Promise<
    Map<
      IdType,
      Pick<
        MapVulnerabilityResultDTO<IdType>,
        "vulnerability" | "id" | "cellId"
      >[]
    >
  >;
  abstract createVulnerabilityConfigCalculation(params: {
    flightHeights: [number, number][];
    flightLocationsPercent: number;
    flightLocationsPercentByCalc: number;
    rotor?: [number, number];
    percentAtRotorHeight?: number | null;
    trackIds: IdType[];
    averageSpeed: number;
    averageCalcSpeed: number;
  }): Promise<IMapVulnerabilityTracksConfigCalculation<IdType>>;
}
