import { CommonVulnerabilityCalculator } from "@rrrcn/admin/src/core/common/entities/vulnerability-config";
import { IMapVulnerabilityCalculation } from "@rrrcn/admin/src/core/vulnerability-map/entities/vulnerability-result";
import { IMapVulnerabilityResultRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/vulnerability-result";
import { nonBlockingCycle } from "@rrrcn/admin/src/api/map/services/map-spatial-grid-cell";
import { IMapSpatialGridCell } from "@rrrcn/admin/src/core/vulnerability-map/entities/spatial-grid";

export class CommonMapVulnerabilityCalculationService<IdType> {
  constructor(
    protected vulnerabilityRepository: IMapVulnerabilityResultRepository<IdType>
  ) {}

  protected async processVulnerabilityCalculation(
    vulnerabilityCalculation: IMapVulnerabilityCalculation<IdType>,
    cells: IMapSpatialGridCell<IdType>[],
    vulnerabilityCalculator: CommonVulnerabilityCalculator<IdType>
  ) {
    nonBlockingCycle(cells, async (cell, index) => {
      const config = vulnerabilityCalculation.config.getCellConfig(cell);
      const calculatedVulnerability =
        await vulnerabilityCalculator.calculateVulnerability(config, cell);
      await this.vulnerabilityRepository.createVulnerabilityResult({
        calculationId: vulnerabilityCalculation.id,
        result: calculatedVulnerability,
        calculatedConfig: config,
        cellId: cell.id,
      });
      if (index === cells.length - 1) {
        await this.vulnerabilityRepository.markVulnerabilityCalculationAsProcessed(
          vulnerabilityCalculation.id
        );
      }
    });
  }
}
