import { IMapSpatialGridRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/spatial-grid";
import { nonBlockingCycle } from "@rrrcn/admin/src/api/map/services/map-spatial-grid-cell";
import { VulnerabilityMapAdminApiTypes } from "@rrrcn/common-types/admin/api/vulnerability-map/map-admin";
import { IMapImportConfigRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/import-config";

export class MapImportConfigServices<IdType> {
  constructor(
    private spatialGridRepository: IMapSpatialGridRepository<IdType>,
    private importConfigRepository: IMapImportConfigRepository<IdType>
  ) {}
  async createImportConfig(
    params: VulnerabilityMapAdminApiTypes.CreateImportConfig.Body
  ) {
    const config = await this.importConfigRepository.createImportConfig(params);
    this.indexImportConfigSpatialGridCells({ importConfigId: config.id });
    return config;
  }
  async indexImportConfigSpatialGridCells(params: { importConfigId: IdType }) {
    const importConfig = await this.importConfigRepository.getImportConfig(
      params.importConfigId
    );
    if (importConfig.isIndexed) {
      throw "Already indexed"; //Todo errors
    }
    const cellsIds = importConfig.getCellIds();
    console.log({ cellsIds });
    const cells = await this.spatialGridRepository.getSpatialGridCellsByIds({
      ids: cellsIds,
    });
    console.log("CELLS ", cells.length);
    nonBlockingCycle(cells, async (cell, i) => {
      await this.spatialGridRepository.addImportConfigToCell({
        cellId: cell.id,
        importConfigId: params.importConfigId,
      });
      if (i === cells.length - 1) {
        await this.importConfigRepository.markImportConfigIndexed(
          importConfig.id
        );
      }
    });
  }
}
