import { IMapSpatialGridRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/spatial-grid";
import { IMapHabitatAreasRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/habitat-areas";
import { nonBlockingCycle } from "@rrrcn/admin/src/api/map/services/map-spatial-grid-cell";
import { VulnerabilityMapAdminApiTypes } from "@rrrcn/common-types/dist/admin/api/vulnerability-map/map-admin";
import { inside } from "@turf/turf";

export class MapHabitatAreaServices<IdType> {
  private spatialGridRepository: IMapSpatialGridRepository<IdType>;
  private habitatAreaRepositpry: IMapHabitatAreasRepository<IdType>;
  constructor(
    spatialGridRepository: IMapSpatialGridRepository<IdType>,
    habitatAreaRepositpry: IMapHabitatAreasRepository<IdType>
  ) {
    this.spatialGridRepository = spatialGridRepository;
    this.habitatAreaRepositpry = habitatAreaRepositpry;
  }
  async createHabitatArea(
    params: VulnerabilityMapAdminApiTypes.CreateHabitatArea.Body
  ) {
    params.area;
    const points = params.points;
    if (points) {
      points.features.filter((it) => inside(it, params.area));
    }
    const area = await this.habitatAreaRepositpry.createHabitatArea(params);
    this.indexHabitatAreaSpatialGridCells({ habitatAreId: area.id });
    return area;
  }
  async indexHabitatAreaSpatialGridCells(params: { habitatAreId: IdType }) {
    const habitatArea = await this.habitatAreaRepositpry.getHabitatArea(
      params.habitatAreId
    );
    if (habitatArea.isIndexed) {
      throw "Already indexed"; //Todo errors
    }
    const cells = await this.spatialGridRepository.getSpatialGridAreaCells(
      habitatArea.spatialGridId,
      habitatArea.area
    );
    nonBlockingCycle(cells, async (cell, i) => {
      await this.spatialGridRepository.addHabitatAreaToCell({
        cellId: cell.id,
        habitatAreaId: params.habitatAreId,
      });
      if (i === cells.length - 1) {
        await this.habitatAreaRepositpry.markHabitatAreaIndexed(habitatArea.id);
      }
    });
  }
}
