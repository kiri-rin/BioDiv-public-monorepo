import { IMapSpatialGridRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/spatial-grid";
import { VulnerabilityMapAdminApiTypes } from "@rrrcn/common-types/dist/admin/api/vulnerability-map/map-admin";
import { convex } from "@turf/turf";
import { IMapMigrationsRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/migrations";
import { featureCollection } from "@turf/helpers";
import { CommonArea } from "@rrrcn/admin/src/core/common/entities/area";

export class MapMigrationsAdminServices<IdType> {
  private spatialGridRepository: IMapSpatialGridRepository<IdType>;
  private migrationsRepository: IMapMigrationsRepository<IdType>;
  constructor(
    spatialGridRepository: IMapSpatialGridRepository<IdType>,
    migrationsRepository: IMapMigrationsRepository<IdType>
  ) {
    this.spatialGridRepository = spatialGridRepository;
    this.migrationsRepository = migrationsRepository;
  }
  async createMigration(
    params: VulnerabilityMapAdminApiTypes.CreateMigration.Body
  ) {
    const migration = await this.migrationsRepository.createMigration(params);
    this.indexMigrationSpatialGridCells({ migrationId: migration.id });
    return migration;
  }
  async indexMigrationSpatialGridCells(params: { migrationId: IdType }) {
    const migration = await this.migrationsRepository.getMigration(
      params.migrationId
    );
    const migrationTracks =
      await this.migrationsRepository.getMigrationsTracksByMigration({
        migrationId: params.migrationId,
      });
    const allPoints = migrationTracks.flatMap((it) => it.track.features);
    const convexHull = convex(featureCollection(allPoints)); //

    const cells = await this.spatialGridRepository.getSpatialGridAreaCells(
      migration.spatialGridId,
      new CommonArea(convexHull)
    );

    await this.migrationsRepository.markMigrationIndexed({
      migrationId: migration.id,
      cells,
    });
  }
  async generateMigrationTracks(migrationId: IdType) {}
}
