import { CommonVulnerabilityCalculator } from "@rrrcn/admin/src/core/common/entities/vulnerability-config";
import { IMapSpatialGridRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/spatial-grid";
import { IMapVulnerabilityResultRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/vulnerability-result";
import { CommonMapVulnerabilityCalculationService } from "@rrrcn/admin/src/core/vulnerability-map/use-cases/admin/vulnerability-calculation/services/index";
import { IMapImportConfigRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/import-config";
import { IMapImportConfig } from "@rrrcn/admin/src/core/vulnerability-map/entities/import";
import { IMapSpatialGridCell } from "@rrrcn/admin/src/core/vulnerability-map/entities/spatial-grid";
import { CommonVulnerabilityConfig } from "@rrrcn/common-types/common/vulnerability-config";
import { AreaVulnerabilityControllerResponse } from "@rrrcn/common-types/services/api/vulnerability/overall/configs";

export class MapImportVulnerabilityCalculationService<
  IdType
> extends CommonMapVulnerabilityCalculationService<IdType> {
  constructor(
    vulnerabilityRepository: IMapVulnerabilityResultRepository<IdType>,
    private spatialGridRepository: IMapSpatialGridRepository<IdType>,
    private importConfigRepository: IMapImportConfigRepository<IdType>
  ) {
    super(vulnerabilityRepository);
  }
  async calculateSpatialGridImportVulnerability({
    spatialGridId,
    importConfigId,
  }: {
    spatialGridId: IdType;
    importConfigId: IdType;
  }) {
    const spatialGrid = await this.spatialGridRepository.getSpatialGrid(
      spatialGridId
    );
    const importConfig = await this.importConfigRepository.getImportConfig(
      importConfigId
    );
    const vulnerabilityCalculator = new ImportVulnerabilityCalculator(
      importConfig
    );
    const cells =
      await this.spatialGridRepository.getSpatialGridImportConfigCells(
        spatialGrid.id,
        importConfig.id
      );
    const vulnerabilityCalculation =
      await this.vulnerabilityRepository.createImportVulnerabilityCalculation({
        gridId: spatialGrid.id,
        importConfigId: importConfig.id,
      });
    this.processVulnerabilityCalculation(
      vulnerabilityCalculation,
      cells,
      vulnerabilityCalculator
    );
    return vulnerabilityCalculation;
  }
}

export class ImportVulnerabilityCalculator<IdType>
  implements CommonVulnerabilityCalculator<IdType>
{
  constructor(public readonly importConfig: IMapImportConfig<IdType>) {}
  calculateVulnerability(
    config: CommonVulnerabilityConfig,
    cell?: IMapSpatialGridCell<IdType>
  ): Promise<AreaVulnerabilityControllerResponse> {
    return Promise.resolve(this.importConfig.getCellVulnerability(cell));
  }
}
