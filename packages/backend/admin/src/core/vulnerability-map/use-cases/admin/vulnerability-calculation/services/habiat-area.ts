import { CommonVulnerabilityCalculator } from "@rrrcn/admin/src/core/common/entities/vulnerability-config";
import { IMapSpatialGridRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/spatial-grid";
import { IMapVulnerabilityResultRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/vulnerability-result";
import { IMapHabitatAreasRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/habitat-areas";
import { MapVulnereabilityCalculationConfig } from "@rrrcn/common-types/strapi/custom-models/MapVulnereabilityCalculation";
import { CommonMapVulnerabilityCalculationService } from "@rrrcn/admin/src/core/vulnerability-map/use-cases/admin/vulnerability-calculation/services/index";

export class MapHabitatAreaVulnerabilityCalculationService<
  IdType
> extends CommonMapVulnerabilityCalculationService<IdType> {
  constructor(
    protected vulnerabilityCalculator: CommonVulnerabilityCalculator<IdType>,
    vulnerabilityRepository: IMapVulnerabilityResultRepository<IdType>,
    private habitatAreaRepository: IMapHabitatAreasRepository<IdType>,
    private spatialGridRepository: IMapSpatialGridRepository<IdType>
  ) {
    super(vulnerabilityRepository);
  }
  async calculateSpatialGridHabitatAreaVulnerability({
    spatialGridId,
    habitatAreaId,
    vulnerabilityConfig,
  }: {
    spatialGridId: IdType;
    habitatAreaId: IdType;
    vulnerabilityConfig: MapVulnereabilityCalculationConfig;
  }) {
    const spatialGrid = await this.spatialGridRepository.getSpatialGrid(
      spatialGridId
    );
    const habitatArea = await this.habitatAreaRepository.getHabitatArea(
      habitatAreaId
    );
    const cells =
      await this.spatialGridRepository.getSpatialGridHabitatAreaCells(
        spatialGrid.id,
        habitatArea.id
      );
    const vulnerabilityCalculation =
      await this.vulnerabilityRepository.createHabitatAreaVulnerabilityCalculation(
        {
          gridId: spatialGrid.id,
          habitatAreaId: habitatArea.id,
          config: vulnerabilityConfig,
        }
      );
    this.processVulnerabilityCalculation(
      vulnerabilityCalculation,
      cells,
      this.vulnerabilityCalculator
    );
    return vulnerabilityCalculation;
  }
}
