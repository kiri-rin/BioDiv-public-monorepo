import { IMapSpatialGridRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/spatial-grid";
import { IMapSpatialGrid } from "@rrrcn/admin/src/core/vulnerability-map/entities/spatial-grid";
import { nonBlockingCycle } from "@rrrcn/admin/src/api/map/services/map-spatial-grid-cell";
import { VulnerabilityMapAdminApiTypes } from "@rrrcn/common-types/dist/admin/api/vulnerability-map/map-admin";
import { CommonArea } from "@rrrcn/admin/src/core/common/entities/area";

export class MapSpatialGridService<IdType> {
  private spatialGridRepository: IMapSpatialGridRepository<IdType>;
  constructor(spatialGridRepository: IMapSpatialGridRepository<IdType>) {
    this.spatialGridRepository = spatialGridRepository;
  }
  async createSpatialGrid(
    params: VulnerabilityMapAdminApiTypes.CreateSpatialGrid.Body
  ) {
    const grid = await this.spatialGridRepository.createSpatialGrid(params);

    this.fulfillSpatialGridWithCells({ gridId: grid.id });
    return grid;
  }
  async createSpatialGridDistrict(
    params: VulnerabilityMapAdminApiTypes.CreateSpatialGridDistrict.Body
  ) {
    const district = await this.spatialGridRepository.createSpatialGridDistrict(
      params
    );

    this.indexSpatialGridDistrict({ districtId: district.id });
    return district;
  }
  async fulfillSpatialGridWithCells(params: { gridId: IdType }) {
    const spatialGrid = await this.spatialGridRepository.getSpatialGrid(
      params.gridId
    );
    if (spatialGrid.isFulfilled) {
      throw "";
    }
    console.log("GENERATING CELLS");
    const cellsStream = await IMapSpatialGrid.generateAreaCells(
      spatialGrid.area,
      spatialGrid.cellSize
    );
    let next: IteratorResult<CommonArea, CommonArea>;
    const i = 1;
    while (!(next = cellsStream.next()).done) {
      const cell = next.value;
      if (cell) {
        await this.spatialGridRepository.createSpatialGridCell(
          params.gridId,
          cell
        );
      }
      // if (chunk.length === 100) {
      //   await Promise.all(chunk);
      //   chunk = [];
      // }
    }
    // await Promise.all(chunk);

    await this.spatialGridRepository.markSpatialGridAsFulfilled({
      gridId: params.gridId,
    });
  }
  async indexSpatialGridDistrict(params: { districtId: IdType }) {
    const district = await this.spatialGridRepository.getSpatialGridDistrict(
      params.districtId
    );
    if (district.isIndexed) {
      throw "";
    }
    const cells = await this.spatialGridRepository.getSpatialGridAreaCells(
      district.spatialGridId,
      district.area
    );
    nonBlockingCycle(cells, async (cell, index) => {
      await this.spatialGridRepository.addDistrictToCell({
        districtId: params.districtId,
        cellId: cell.id,
      });
      if (index === cells.length - 1) {
        await this.spatialGridRepository.markSpatialGridDistrictAsIndexed({
          districtId: params.districtId,
        });
      }
    });
  }
}
