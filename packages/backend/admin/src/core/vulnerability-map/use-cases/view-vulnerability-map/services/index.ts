import { IMapSpatialGridRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/spatial-grid";
import { IMapVulnerabilityResultRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/vulnerability-result";
import { IMapMigrationsRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/migrations";
import { IMapHabitatAreasRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/habitat-areas";
import { IMapSensitiveAreasRepository } from "@rrrcn/admin/src/core/vulnerability-map/repository/sensitive-areas";
import { IMapVulnerabilityMapService } from "@rrrcn/admin/src/core/vulnerability-map/use-cases/view-vulnerability-map/services/types";
import {
  VulnerabilityMapBirdTrackShort,
  VulnerabilityMapBirdTrackToShow,
  VulnerabilityMapHabitatAreaShort,
  VulnerabilityMapMigrationShort,
  VulnerabilityMapSensitiveAreas,
  VulnerabilityMapSpatialGridDistrictCellShort,
  VulnerabilityMapSpatialGridDistrictCellWithVulnerability,
} from "@rrrcn/common-types/admin/api/vulnerability-map/entities/spatial-grid";
import { MapVulnerabilityMapDataMapper } from "@rrrcn/admin/src/core/vulnerability-map/use-cases/view-vulnerability-map/services/mapper";

export class MapVulnerabilityMapService
  implements IMapVulnerabilityMapService<string>
{
  private spatialGridRepository: IMapSpatialGridRepository<string>;
  private vulnerabilitiesRepository: IMapVulnerabilityResultRepository<string>;
  private habitatAreasRepository: IMapHabitatAreasRepository<string>;
  private migrationsRepository: IMapMigrationsRepository<string>;
  private sensitiveAreasRepository: IMapSensitiveAreasRepository<string>;
  private mapper = new MapVulnerabilityMapDataMapper();

  constructor(
    spatialGridRepository: IMapSpatialGridRepository<string>,
    vulnerabilitiesRepository: IMapVulnerabilityResultRepository<string>,
    habitatAreasRepository: IMapHabitatAreasRepository<string>,
    migrationsRepository: IMapMigrationsRepository<string>,
    sensitiveAreasRepository: IMapSensitiveAreasRepository<string>
  ) {
    this.spatialGridRepository = spatialGridRepository;
    this.vulnerabilitiesRepository = vulnerabilitiesRepository;
    this.habitatAreasRepository = habitatAreasRepository;
    this.migrationsRepository = migrationsRepository;
    this.sensitiveAreasRepository = sensitiveAreasRepository;
  }

  public async getAvailableSpatialGrids() {
    const grids = await this.spatialGridRepository.getPublishedSpatialGrids();
    return grids.map((it) => ({ name: it.title, id: it.id }));
  }

  public async getAvailableSpatialGridsDistricts(params: { gridId: string }) {
    const districts =
      await this.spatialGridRepository.getSpatialGridPublishedDistricts(params);
    return districts.map((it) => ({ title: it.title, id: it.id }));
  }

  public async getAvailableSpatialGridsDistrictCells(params: {
    districtId: string;
  }): Promise<VulnerabilityMapSpatialGridDistrictCellShort[]> {
    const cells = await this.spatialGridRepository.getSpatialGridDistrictCells(
      params
    );
    return cells.map((it) => ({ id: it.id, bbox: it.area.bbox }));
  }

  public async getSpatialGridDistrictCellsWithVulnerabilities(params: {
    districtId: string;
  }): Promise<VulnerabilityMapSpatialGridDistrictCellWithVulnerability[]> {
    const vulnerabilities =
      await this.vulnerabilitiesRepository.getVulnerabilityResultsGroupedBySpatialGridCell(
        params
      );
    const cells = await this.spatialGridRepository.getSpatialGridDistrictCells(
      params
    );
    return cells.map((it) => ({
      vulnerability: vulnerabilities
        .get(it.id)
        .reduce((a, b) => a + b.vulnerability, 0),
      bbox: it.area.bbox,
      id: it.id,
    }));
  }

  public async getSpatialGridCellHabitatAreas(params: {
    cellId: string;
  }): Promise<VulnerabilityMapHabitatAreaShort[]> {
    const habitatAreas =
      await this.habitatAreasRepository.getHabitatAreasBySpatialGridCell(
        params
      );
    return habitatAreas.map(this.mapper.mapHabitatAreaShort);
  }
  public async getSpatialGridHabitatAreas(params: {
    gridId: string;
  }): Promise<VulnerabilityMapHabitatAreaShort[]> {
    const habitatAreas =
      await this.habitatAreasRepository.getHabitatAreasBySpatialGrid(params);
    return habitatAreas.map(this.mapper.mapHabitatAreaShort);
  }

  public async getSpatialGridCellMigrations(params: {
    cellId: string;
  }): Promise<VulnerabilityMapMigrationShort[]> {
    const migrations =
      await this.migrationsRepository.getMigrationsBySpatialGridCell(params);
    return migrations.map(this.mapper.mapMigrationShort);
  }

  public async getSpatialGridCellSensitiveAreas(params: {
    cellId: string;
  }): Promise<VulnerabilityMapSensitiveAreas[]> {
    const sensitiveAreas =
      await this.sensitiveAreasRepository.getSensitiveAreasBySpatialGridCell(
        params
      );
    return sensitiveAreas.map(this.mapper.mapSensitiveAreaShort);
  }
  public async getSpatialGridSensitiveAreas(params: {
    gridId: string;
  }): Promise<VulnerabilityMapSensitiveAreas[]> {
    const sensitiveAreas =
      await this.sensitiveAreasRepository.getSensitiveAreasBySpatialGrid(
        params
      );
    return sensitiveAreas.map(this.mapper.mapSensitiveAreaShort);
  }

  async getSpatialGridMigrationTracks(params: {
    migrationId: string;
  }): Promise<VulnerabilityMapBirdTrackShort[]> {
    const tracks =
      await this.migrationsRepository.getMigrationsTracksByMigration(params);
    return tracks.map((it) => ({
      title: it.title,
      id: it.id,
      species: it.species,
    }));
  }

  async getSpatialGridMigrations(params: {
    gridId: string;
  }): Promise<VulnerabilityMapMigrationShort[]> {
    const migrations =
      await this.migrationsRepository.getMigrationsBySpatialGrid(params);
    return migrations.map(this.mapper.mapMigrationShort);
  }

  async getSpatialGridTrackToShow(params: {
    trackId: string;
  }): Promise<VulnerabilityMapBirdTrackToShow> {
    const track = await this.migrationsRepository.getMigrationsTrack(params);
    return { title: track.title, track: track.track, id: track.id };
  }

  async getSpatialGridTracks(params: {
    gridId: string;
  }): Promise<VulnerabilityMapBirdTrackShort[]> {
    const tracks =
      await this.migrationsRepository.getMigrationsTracksBySpatialGrid(params);
    return tracks.map((track) => ({
      title: track.title,
      species: track.species,
      id: track.id,
    }));
  }
}
