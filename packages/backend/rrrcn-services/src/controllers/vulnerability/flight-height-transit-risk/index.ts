import {
  interpolate,
  xrisksum2,
  ydistsum,
} from "../../../services/vulnerability/base_functions";
import { mkdirSync, writeFileSync } from "fs";
import path from "path";
import { stringify } from "csv-stringify/sync";
import { ServicesVulnerabilityApiTypes } from "@rrrcn/common-types/services/api/vulnerability";

export const flightHeightTransitRisk = ({
  outputs,
  birdConfig,
  flightheights,
  updownProportion,
  windfarmConfig,
  windfarmInstanceConfig,
  xinc,
  yinc,
}: ServicesVulnerabilityApiTypes.FlightHeightDistributionRisk.Body): ServicesVulnerabilityApiTypes.FlightHeightDistributionRisk.Response => {
  const csvData = [["y", "dy", "riskup", "riskdown", "dyriskup", "dyriskdown"]];
  let totalUp = 0;
  let totalDown = 0;
  const dys = [];
  for (let _y = -1; _y < 1 + yinc; _y += yinc) {
    const y = _y >= 1 ? 1 : _y;
    const dy =
      windfarmConfig.radius *
      interpolate(
        flightheights,
        y * windfarmConfig.radius +
          windfarmInstanceConfig.hubheight +
          windfarmInstanceConfig.offset
      );
    dys.push(dy);
    const riskup = xrisksum2(y, xinc, "up", windfarmConfig, birdConfig);
    const riskdown = xrisksum2(y, xinc, "down", windfarmConfig, birdConfig);

    const dyriskup = dy * riskup;
    const dyriskdown = dy * riskdown;
    totalUp += dyriskup;
    totalDown += dyriskdown;
    csvData.push([
      String(y),
      String(dy),
      String(riskup),
      String(riskdown),
      String(dyriskup),
      String(dyriskdown),
    ]);
  }
  const fluxIntegral =
    (ydistsum(
      xinc,
      yinc,
      "up",
      {
        windfarmInstanceConfig,
        windfarmConfig,
        birdConfig,
        flightheights,
      },
      1
    ) *
      2) /
    Math.PI;
  const collisionIntegralUp =
    (ydistsum(
      xinc,
      yinc,
      "up",
      {
        windfarmInstanceConfig,
        windfarmConfig,
        birdConfig,
        flightheights,
      },
      0
    ) *
      2) /
    Math.PI;
  const collisionIntegralDown =
    (ydistsum(
      xinc,
      yinc,
      "down",
      {
        windfarmInstanceConfig,
        windfarmConfig,
        birdConfig,
        flightheights,
      },
      0
    ) *
      2) /
    Math.PI;

  const collisionIntegral =
    updownProportion * collisionIntegralUp +
    (1 - updownProportion) * collisionIntegralDown;
  const proportionAtRotorHeight =
    dys.reduce((acc, it, index) => {
      if (!index) {
        return acc + it / 2;
      }
      if (index === dys.length - 1) {
        return acc + it / 2;
      }
      return acc + it;
    }, 0) * yinc;
  csvData.push(["", "", "", "", "", ""]);
  csvData.push([
    "Q'2R from flight distribution",
    "",
    "",
    "",
    "",
    String(proportionAtRotorHeight),
  ]);
  csvData.push(["", "", "", "", "", ""]);
  csvData.push(["Flux integral", "", "", "", String(fluxIntegral), ""]);
  csvData.push([
    "Collision integral",
    "",
    "up",
    String(collisionIntegralUp),
    "down",
    String(collisionIntegralDown),
  ]);
  csvData.push([
    "updown proportions",
    "",
    "",
    updownProportion * 100 + "%",
    "",
    (1 - updownProportion) * 100 + "%",
  ]);
  csvData.push([
    "Collision integral average",
    "",
    "",
    "",
    String(collisionIntegral),
    "",
  ]);
  if (outputs !== undefined) {
    mkdirSync(outputs, { recursive: true });
    writeFileSync(path.join(outputs, "extended.csv"), stringify(csvData));
  }
  return { collisionIntegral, fluxIntegral, proportionAtRotorHeight };
};
