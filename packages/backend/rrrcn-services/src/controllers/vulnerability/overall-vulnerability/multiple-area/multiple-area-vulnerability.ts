import * as path from "path";
import { areaVulnerabilityController } from "../index";

import { FlightHeightTransitRiskResponse } from "@rrrcn/common-types/services/api/vulnerability/flight-height-distribution/configs";
import { ServicesVulnerabilityApiTypes } from "@rrrcn/common-types/services/api/vulnerability";

const avoidanceRates: number[] = [];

export const multipleAreaVulnerabilityController = async ({
  areas,
  birdConfig,
  outputs,
  updownProportion,
  windfarmConfig,
  windfarmInstanceConfig,
  xinc,
  yinc,
}: ServicesVulnerabilityApiTypes.OverallMultipleAreaVulnerability.Body): Promise<
  | ServicesVulnerabilityApiTypes.OverallMultipleAreaVulnerability.Response
  | undefined
> => {
  if (!outputs) return;
  const result: { [p: string]: FlightHeightTransitRiskResponse | any } = {};
  for (const {
    area,
    flightheights,
    percentAtRotorHeight,
    birdDensitiesPerMonth,
    tracksDensityPerMonth,
    id,
  } of areas) {
    const areaPath = path.join(outputs, String(id));
    result[id] = await areaVulnerabilityController({
      percentAtRotorHeight,
      flightheights,
      birdDensitiesPerMonth,
      area,
      outputs: areaPath,
      birdConfig,
      tracksDensityPerMonth,
      updownProportion,
      windfarmConfig,
      windfarmInstanceConfig,
      xinc,
      yinc,
    });
  }
  return result;
};
