import { Species } from "@rrrcn/common-types/strapi/models/Species";
import { SpatialGrid } from "@rrrcn/common-types/strapi/models/SpatialGrid";
import {
  useMapContext,
  useMapPageProps,
  useMapSlugs,
} from "@/components/map/context";
import React, { useEffect, useMemo } from "react";
import { parseGeojson } from "@rrrcn/frontend-helpers/src/geometry/map/useDrawGeojson";
import * as turf from "@turf/turf";
import { useRouter } from "next/router";
import { List, ListItemButton } from "@mui/material";
import Link from "next/link";
import { WithLocalesMap } from "@rrrcn/common-types/strapi/custom-models/with-localizations";
import { useLang } from "@/utils/translations/context";

export const MapPageAreaSelect = () => {
  const { grids } = useMapPageProps();
  const { map } = useMapContext();
  const router = useRouter();

  const mapGrids = useMemo(() => {
    return grids
      ? parseGeojson({
          type: "FeatureCollection",
          features: grids
            .filter((it) => it.polygon?.geometry)
            .map((it) =>
              turf.feature(it.polygon?.geometry!, {
                ...it.polygon?.properties,
                slug: it.slug,
              })
            ),
        })
      : [];
  }, [grids]);
  useEffect(() => {
    if (map) {
      const center = turf.centroid({
        type: "FeatureCollection",
        features:
          grids
            ?.filter((it) => it.polygon?.geometry)
            .map((it) =>
              turf.feature(it.polygon?.geometry!, {
                ...it.polygon?.properties,
                slug: it.slug,
              })
            ) || [],
      });
      map.setCenter({
        lat: center.geometry.coordinates[1],
        lng: center.geometry.coordinates[0],
      });
      mapGrids?.forEach((it, index) => {
        it.setMap(map);
        it.addListener("click", () => {
          router.replace(`/map/${grids?.[index]?.slug}`);
        });
      });
    }
    return () => {
      mapGrids?.forEach((it) => it.setMap(null));
    };
  }, [mapGrids, map]);
  return (
    <List style={{ width: 200 }}>
      {grids?.map((item) => (
        <GridItem item={item} key={item.id} />
      ))}
    </List>
  );
};

const GridItem = ({ item }: { item: WithLocalesMap<SpatialGrid> }) => {
  const { lang } = useLang();
  const router = useRouter();

  return (
    <ListItemButton
      onClick={() => {
        router.push(`${item.slug}`);
      }}
      key={item.slug}
    >
      {item.localesMap[lang]?.title || item.title}
    </ListItemButton>
  );
};
