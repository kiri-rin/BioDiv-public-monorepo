import { useRouter } from "next/router";
import { useTranslations } from "@/utils/translations";
import {
  useMapContext,
  useMapPageProps,
  useMapSlugs,
} from "@/components/map/context";
import React, { useMemo } from "react";
import {
  parseGeojson,
  useShowMapObjects,
} from "@rrrcn/frontend-helpers/src/geometry/map/useDrawGeojson";
import { Feature, MultiPolygon, Polygon } from "geojson";
import { Button, CircularProgress } from "@mui/material";
import { SensitiveAreaSource } from "@rrrcn/common-types/strapi/models/SensitiveAreaSource";
import { useSensitiveArea } from "@/components/map/vulnerability/components/SensitiveAreas/swr";

export const SensitiveAreasItemComponent = ({
  source,
}: {
  source: SensitiveAreaSource;
}) => {
  const translations = useTranslations();
  const { map } = useMapContext();
  const { data, isMutating, trigger } = useSensitiveArea(source.id);
  const mapSensitiveAreas = useMemo(() => {
    return map && data
      ? parseGeojson({
          type: "FeatureCollection",
          features: data.results
            .filter((it) => it.polygon?.geometry)
            .map((it) => it.polygon as Feature<Polygon | MultiPolygon>),
        })
      : [];
  }, [data]);
  const {
    show: sensitiveAreasShown,
    showObjects: showSensitiveAreas,
    hideObjects: hideSensitiveAreas,
  } = useShowMapObjects(mapSensitiveAreas, map, false, {
    fillColor: "red",
  });
  return (
    <Button
      onClick={() => {
        if (!sensitiveAreasShown) {
          showSensitiveAreas();
          !data?.results && trigger();
        } else {
          hideSensitiveAreas();
        }
      }}
    >
      {sensitiveAreasShown ? "Hide" : "Show"} {source.name}
      {translations["map.sensitive-areas-title"].toLowerCase()}
      {isMutating && <CircularProgress />}
    </Button>
  );
};
