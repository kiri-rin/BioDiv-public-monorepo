import { PaginatedResult } from "@rrrcn/common-types/strapi/models/Pagination";
import { WithPolygon } from "@rrrcn/common-types/strapi/custom-models/with-polygon";
import { SpatialGridDistrict } from "@rrrcn/common-types/strapi/models/SpatialGridDistrict";
import { Species } from "@rrrcn/common-types/strapi/models/Species";
import { SensitiveArea } from "@rrrcn/common-types/strapi/models/SensitiveArea";
import React, { useEffect, useMemo } from "react";
import {
  parseGeojson,
  useShowMapObjects,
} from "@rrrcn/frontend-helpers/src/geometry/map/useDrawGeojson";
import { Feature, MultiPolygon, Polygon } from "geojson";
import {
  HABITAT_AREAS_SLUG,
  useMapContext,
  useMapPageProps,
  useMapSlugs,
} from "@/components/map/context";
import { Button, List, ListItemButton } from "@mui/material";
import { MapPageSpeciesSelect } from "@/components/map/vulnerability/components/SpeciesSelect";
import Link from "next/link";
import { useRouter } from "next/router";
import { useTranslations } from "@/utils/translations";
import { WithLocalesMap } from "@rrrcn/common-types/strapi/custom-models/with-localizations";
import { useLang } from "@/utils/translations/context";
import { CommonLink } from "@/components/common/Link";

export const MapGridPage = () => {
  const router = useRouter();
  const translations = useTranslations();
  const { map } = useMapContext();
  const { districts, sensitive_areas, species } = useMapPageProps();
  const { selectedSpeciesSlug, selectedGridSlug } = useMapSlugs();
  const mapDistricts = useMemo(() => {
    return map && districts
      ? parseGeojson({
          type: "FeatureCollection",
          features: districts.map(
            (it) => it.polygon as Feature<Polygon | MultiPolygon>
          ),
        })
      : [];
  }, [map, districts]);
  useEffect(() => {
    if (mapDistricts && map) {
      mapDistricts.forEach((it) => it.setMap(map));
    }
    return () => {
      mapDistricts?.forEach((it) => it.setMap(null));
    };
  }, [mapDistricts, map]);

  return (
    <>
      <List style={{ width: 200 }}>
        {districts?.map((item) => (
          <DistrictItem item={item} key={item.id} />
        ))}
      </List>
    </>
  );
};
const DistrictItem = ({
  item,
}: {
  item: WithLocalesMap<SpatialGridDistrict>;
}) => {
  const { selectedSpeciesSlug, selectedGridSlug } = useMapSlugs();
  const { lang } = useLang();
  const router = useRouter();
  return (
    <ListItemButton
      onClick={() => {
        router.push(`${selectedGridSlug}/${item.slug}`);
      }}
      key={item.slug}
    >
      {item?.localesMap[lang]?.name || item.name}
    </ListItemButton>
  );
};
