import {
  HABITAT_AREAS_SLUG,
  useMapContext,
  useMapPageProps,
  useMapSlugs,
} from "@/components/map/context";
import React, { useMemo } from "react";
import {
  parseGeojson,
  useShowMapObjects,
} from "@rrrcn/frontend-helpers/src/geometry/map/useDrawGeojson";
import { Feature, MultiPolygon, Polygon } from "geojson";
import { MapSpatialGridCell } from "@rrrcn/common-types/strapi/custom-models/MapSpatialGridCell";
import { Species } from "@rrrcn/common-types/strapi/models/Species";
import { MapPageSpeciesSelect } from "@/components/map/vulnerability/components/SpeciesSelect";
import { useMainRightPanelContext } from "@/components/map/right-panel/context";
import { useSelectedSpatialGridCell } from "@/components/map/right-panel/swr";

export const MapDistrictPage = () => {
  const { selectedCell } = useMainRightPanelContext();
  const { cells, species } = useMapPageProps();
  const { map } = useMapContext();
  const { setSelectedCell } = useMainRightPanelContext();
  const { selectedDistrictSlug, selectedGridSlug, selectedSpeciesSlug } =
    useMapSlugs();
  const filteredSpecies: Species[] = useMemo(
    () =>
      (selectedSpeciesSlug
        ? species?.filter((it) => it.slug === selectedSpeciesSlug)
        : species) || [],
    [selectedSpeciesSlug, species]
  );
  const mapCells = useMemo(() => {
    return cells
      ? parseGeojson({
          type: "FeatureCollection",
          features: cells.results.map(
            (it) => it.polygon as Feature<Polygon | MultiPolygon>
          ),
        }).map((it, index) => {
          it.setOptions({
            strokeWeight: 0.1,
            fillColor: getCellColor(cells?.results?.[index], filteredSpecies),
          });
          it.addListener("click", () => {
            console.log("CLICK CELL", cells?.results?.[index]);
            cells?.results?.[index] && setSelectedCell(cells?.results?.[index]);
          });

          return it;
        })
      : [];
  }, [cells, filteredSpecies]);

  const { show: habitatAreasShown } = useShowMapObjects(mapCells, map, true);
  return (
    <MapPageSpeciesSelect
      baseRoute={`${selectedGridSlug}/${selectedDistrictSlug}`}
      species={species || []}
    />
  );
};
export function getCellColor(cell: MapSpatialGridCell, allSpecies: Species[]) {
  if (cell.sensitive_areas?.count) {
    return "red";
  }
  const vulnerabilityScore = cell.map_vulnerability_results?.reduce(
    (acc, it) => {
      const speciesId =
        it.map_vulnereability_calculation?.map_habitat_area?.species?.id ||
        it.map_vulnereability_calculation?.map_species_migration?.species?.id;
      const infoSpecies = allSpecies.find((sp) => sp.id === speciesId);
      if (!infoSpecies || !it.max_vulnerability) {
        return acc;
      }

      if (
        infoSpecies.yellow_vulnerability_max !== null &&
        it.max_vulnerability >= infoSpecies.yellow_vulnerability_max
      ) {
        return 3; //RED VULNERABILITY
      }
      if (
        infoSpecies.yellow_vulnerability_max !== null &&
        infoSpecies.green_vulnerability_max &&
        it.max_vulnerability >= infoSpecies.green_vulnerability_max
      ) {
        const normalizedValue =
          (it.max_vulnerability - infoSpecies.green_vulnerability_max) /
          (infoSpecies.yellow_vulnerability_max -
            infoSpecies.green_vulnerability_max);
        return acc + 1 + normalizedValue;
      }
      if (
        infoSpecies.green_vulnerability_max !== null &&
        it.max_vulnerability >= infoSpecies.green_vulnerability_max
      ) {
        const normalizedValue =
          it.max_vulnerability / infoSpecies.green_vulnerability_max;
        return acc + normalizedValue;
      }
      return acc;
    },
    0 as number
  );
  if (vulnerabilityScore! >= 2) {
    return "red";
  }
  if (vulnerabilityScore! >= 1) {
    return "yellow";
  }
  return "green";
}
